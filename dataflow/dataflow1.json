{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_dl_bronze_customers",
						"type": "DatasetReference"
					},
					"name": "CustomersSource"
				},
				{
					"dataset": {
						"referenceName": "ds_dl_silver_products",
						"type": "DatasetReference"
					},
					"name": "ProductsSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_dl_silver_customer",
						"type": "DatasetReference"
					},
					"name": "CustomersSink"
				}
			],
			"transformations": [
				{
					"name": "DataTypeUpdateForcustomers"
				},
				{
					"name": "AddColumnsCustomers"
				},
				{
					"name": "RenameColumns"
				},
				{
					"name": "split1"
				},
				{
					"name": "cast1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CUSTOMER_ID as string,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          Ingestion_by as string,",
				"          Ingestion_TimeStamp as string,",
				"          Ingestion_Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> CustomersSource",
				"source(output(",
				"          CUSTOMER_ID as integer,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          Ingestion_by as string,",
				"          Ingestion_TimeStamp as string,",
				"          Ingestion_Date as string,",
				"          IngestedBy as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ProductsSource",
				"CustomersSource cast(output(",
				"          CUSTOMER_ID as integer",
				"     ),",
				"     errors: true) ~> DataTypeUpdateForcustomers",
				"DataTypeUpdateForcustomers derive(Exec_By = 'Pratap') ~> AddColumnsCustomers",
				"AddColumnsCustomers select(mapColumn(",
				"          CUSTOMER_ID,",
				"          FULL_NAME,",
				"          EMAIL_ADDRESS,",
				"          Ingestion_by,",
				"          Ingestion_TimeStamp,",
				"          Ingestion_Date,",
				"          IngestedBy = Exec_By",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumns",
				"RenameColumns split(!isNull(CUSTOMER_ID),",
				"     disjoint: false) ~> split1@(NotNull, Null)",
				"ProductsSource cast(output(",
				"          CUSTOMER_ID as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"split1@NotNull sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CustomersSink"
			]
		}
	}
}