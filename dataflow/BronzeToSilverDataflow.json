{
	"name": "BronzeToSilverDataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_dl_bronze_customers",
						"type": "DatasetReference"
					},
					"name": "CustomersSource"
				},
				{
					"dataset": {
						"referenceName": "ds_dl_bronze_products",
						"type": "DatasetReference"
					},
					"name": "ProductsSource"
				},
				{
					"dataset": {
						"referenceName": "ds_dl_bronze_order_items",
						"type": "DatasetReference"
					},
					"name": "OrderItemsSource"
				},
				{
					"dataset": {
						"referenceName": "ds_dl_bronze_Orders",
						"type": "DatasetReference"
					},
					"name": "OrdersSource"
				},
				{
					"dataset": {
						"referenceName": "ds_dl_bronze_Stores",
						"type": "DatasetReference"
					},
					"name": "StoresSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_dl_silver_customers_out",
						"type": "DatasetReference"
					},
					"name": "CustomersSink"
				},
				{
					"dataset": {
						"referenceName": "ds_dl_silver_out",
						"type": "DatasetReference"
					},
					"name": "Sink"
				},
				{
					"dataset": {
						"referenceName": "ds_dl_silver_out",
						"type": "DatasetReference"
					},
					"name": "StoresSink"
				},
				{
					"dataset": {
						"referenceName": "ds_dl_silver_out",
						"type": "DatasetReference"
					},
					"name": "OrderSink"
				},
				{
					"dataset": {
						"referenceName": "ds_dl_silver_products_out",
						"type": "DatasetReference"
					},
					"name": "ProductsSink"
				}
			],
			"transformations": [
				{
					"name": "CustomersTblCast",
					"description": "Data type updating for customers table"
				},
				{
					"name": "AddColumnsCustomers"
				},
				{
					"name": "RenameColumns"
				},
				{
					"name": "split1"
				},
				{
					"name": "ProductsTblCast",
					"description": "Data type updating for products table"
				},
				{
					"name": "OrderItemsTblCast"
				},
				{
					"name": "OrderTblsCast"
				},
				{
					"name": "StoresTblCast"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "RenameColumns3"
				},
				{
					"name": "NotNullfilter1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "NotNullfilter3"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "NotNullfilter2"
				},
				{
					"name": "derivedColumn4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CUSTOMER_ID as string,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          Ingestion_by as string,",
				"          Ingestion_TimeStamp as string,",
				"          Ingestion_Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> CustomersSource",
				"source(output(",
				"          PRODUCT_ID as string,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as string,",
				"          Ingestion_by as string,",
				"          Ingestion_TimeStamp as string,",
				"          Ingestion_Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> ProductsSource",
				"source(output(",
				"          ORDER_ID as string,",
				"          LINE_ITEM_ID as string,",
				"          PRODUCT_ID as string,",
				"          UNIT_PRICE as string,",
				"          QUANTITY as string,",
				"          Ingestion_by as string,",
				"          Ingestion_TimeStamp as string,",
				"          Ingestion_Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> OrderItemsSource",
				"source(output(",
				"          CUSTOMER_ID as string,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          Ingestion_by as string,",
				"          Ingestion_TimeStamp as string,",
				"          Ingestion_Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> OrdersSource",
				"source(output(",
				"          STORE_ID as string,",
				"          STORE_NAME as string,",
				"          WEB_ADDRESS as string,",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          Ingestion_by as string,",
				"          Ingestion_TimeStamp as string,",
				"          Ingestion_Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> StoresSource",
				"CustomersSource cast(output(",
				"          CUSTOMER_ID as integer",
				"     ),",
				"     errors: true) ~> CustomersTblCast",
				"CustomersTblCast derive(Exec_By = 'Pratap') ~> AddColumnsCustomers",
				"AddColumnsCustomers select(mapColumn(",
				"          CUSTOMER_ID,",
				"          FULL_NAME,",
				"          EMAIL_ADDRESS,",
				"          Ingestion_by,",
				"          Ingestion_TimeStamp,",
				"          Ingestion_Date,",
				"          IngestedBy = Exec_By",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumns",
				"RenameColumns split(!isNull(CUSTOMER_ID),",
				"     disjoint: false) ~> split1@(NotNull, Null)",
				"ProductsSource cast(output(",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double",
				"     ),",
				"     errors: true) ~> ProductsTblCast",
				"OrderItemsSource cast(output(",
				"          ORDER_ID as integer,",
				"          LINE_ITEM_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double",
				"     ),",
				"     errors: false) ~> OrderItemsTblCast",
				"OrdersSource cast(output(",
				"          CUSTOMER_ID as string",
				"     ),",
				"     errors: true) ~> OrderTblsCast",
				"StoresSource cast(output(",
				"          STORE_ID as integer,",
				"          LATITUDE as double,",
				"          LONGITUDE as double",
				"     ),",
				"     errors: true) ~> StoresTblCast",
				"OrderItemsTblCast derive(exec_by = 'pratap') ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          ORDER_ID,",
				"          LINE_ITEM_ID,",
				"          PRODUCT_ID,",
				"          UNIT_PRICE,",
				"          Prod_QTY = QUANTITY,",
				"          Ingestion_by,",
				"          Ingestion_TimeStamp,",
				"          Ingestion_Date,",
				"          exec_by",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumns3",
				"RenameColumns3 filter(!isNull(ORDER_ID)) ~> NotNullfilter1",
				"OrderTblsCast derive(exec_by = 'pratap') ~> derivedColumn2",
				"StoresTblCast derive(exec_by = 'pratap') ~> derivedColumn3",
				"select1 filter(!isNull(STORE_ID)) ~> NotNullfilter3",
				"derivedColumn3 select(mapColumn(",
				"          STORE_ID,",
				"          STORE_NAME,",
				"          WEB_ADDRESS,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          Ingestion_by,",
				"          Ingestion_TimeStamp,",
				"          Ingestion_Date,",
				"          exec_by",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn2 select(mapColumn(",
				"          CUSTOMER_ID,",
				"          FULL_NAME,",
				"          EMAIL_ADDRESS,",
				"          Ingestion_by,",
				"          Ingestion_TimeStamp,",
				"          Ingestion_Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 filter(!isNull(CUSTOMER_ID)) ~> NotNullfilter2",
				"ProductsTblCast derive(exec_by = 'pratap') ~> derivedColumn4",
				"split1@NotNull sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_ID as integer,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          Ingestion_by as string,",
				"          Ingestion_TimeStamp as string,",
				"          Ingestion_Date as string,",
				"          IngestedBy as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CustomersSink",
				"NotNullfilter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_ID as integer,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          Ingestion_by as string,",
				"          Ingestion_TimeStamp as string,",
				"          Ingestion_Date as string,",
				"          IngestedBy as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Sink",
				"NotNullfilter3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_ID as integer,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          Ingestion_by as string,",
				"          Ingestion_TimeStamp as string,",
				"          Ingestion_Date as string,",
				"          IngestedBy as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StoresSink",
				"NotNullfilter2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_ID as integer,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          Ingestion_by as string,",
				"          Ingestion_TimeStamp as string,",
				"          Ingestion_Date as string,",
				"          IngestedBy as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OrderSink",
				"derivedColumn4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_ID as integer,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          Ingestion_by as string,",
				"          Ingestion_TimeStamp as string,",
				"          Ingestion_Date as string,",
				"          IngestedBy as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ProductsSink"
			]
		}
	}
}